/*
* Generated file
*
* Generated from: yang module name: wirelessPowerControl-impl-cfg yang module local name: power-control-impl
* Generated by: org.opendaylight.controller.config.yangjmxgenerator.plugin.JMXGenerator
* Generated at: Wed Apr 19 11:21:11 CEST 2017
*
* Do not modify this file unless it is present under src/main directory
*/
package org.opendaylight.yang.gen.v1.urn.opendaylight.params.xml.ns.yang.wirelesspowercontrol.impl.rev160929;

import javax.management.ObjectName;
import org.opendaylight.controller.config.api.DependencyResolver;
import org.opendaylight.controller.config.api.DynamicMBeanWithInstance;
import org.opendaylight.controller.config.api.ModuleIdentifier;
import org.osgi.framework.BundleContext;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class WirelessPowerControlImplModuleFactory extends org.opendaylight.yang.gen.v1.urn.opendaylight.params.xml.ns.yang.wirelesspowercontrol.impl.rev160929.AbstractWirelessPowerControlImplModuleFactory {
    private static final Logger LOG = LoggerFactory.getLogger(WirelessPowerControlImplModuleFactory.class);

    @Override
    public WirelessPowerControlImplModule instantiateModule(String instanceName, DependencyResolver dependencyResolver, WirelessPowerControlImplModule oldModule, AutoCloseable oldInstance, BundleContext bundleContext) {
        WirelessPowerControlImplModule module = super.instantiateModule(instanceName, dependencyResolver, oldModule, oldInstance, bundleContext);
        module.setBundleContext(bundleContext);
        return module;
    }

    @Override
    public org.opendaylight.controller.config.spi.Module createModule(String instanceName, DependencyResolver dependencyResolver, DynamicMBeanWithInstance old, BundleContext bundleContext) throws Exception {
        WirelessPowerControlImplModule oldModule;
        try {
            oldModule = (WirelessPowerControlImplModule) old.getModule();
        } catch(Exception e) {
            WirelessPowerControlImplModule newModule = handleChangedClass(old, dependencyResolver);
            old.getInstance().close();
            return newModule;
        }
        WirelessPowerControlImplModule module = instantiateModule(instanceName, dependencyResolver, oldModule, old.getInstance(), bundleContext);
        module.setRpcRegistry(oldModule.getRpcRegistry());
        module.setBroker(oldModule.getBroker());
        module.setListenService(oldModule.getListenService());

        return module;
    }

    @Override
    public WirelessPowerControlImplModule instantiateModule(String instanceName, DependencyResolver dependencyResolver, BundleContext bundleContext) {
        WirelessPowerControlImplModule module = super.instantiateModule(instanceName, dependencyResolver, bundleContext);
        module.setBundleContext(bundleContext);
        return module;
    }

    public WirelessPowerControlImplModule handleChangedClass(DynamicMBeanWithInstance old, DependencyResolver dependencyResolver) throws Exception {
        String instanceName = old.getModule().getIdentifier().getInstanceName();
        WirelessPowerControlImplModule newModule = new WirelessPowerControlImplModule(new ModuleIdentifier(NAME, instanceName), dependencyResolver);
        newModule.setListenService((ObjectName)old.getAttribute(AbstractWirelessPowerControlImplModule.listenServiceJmxAttribute.getAttributeName()));
        newModule.setBroker((ObjectName)old.getAttribute(AbstractWirelessPowerControlImplModule.brokerJmxAttribute.getAttributeName()));
        newModule.setRpcRegistry((ObjectName)old.getAttribute(AbstractWirelessPowerControlImplModule.rpcRegistryJmxAttribute.getAttributeName()));
        return newModule;
    }
}
